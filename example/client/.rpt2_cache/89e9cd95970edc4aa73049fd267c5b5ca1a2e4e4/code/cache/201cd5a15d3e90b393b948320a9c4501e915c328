{"code":"import { BasicWebSocket } from \"./basicwebsocket\";\r\nimport { PingingWebSocket, } from \"./pingingwebsocket\";\r\nexport const reconnectDelayMs = 10000;\r\nexport class ReconnectingWebSocket {\r\n    constructor(connectFunction, listener) {\r\n        this.socket = undefined;\r\n        this.reconnectHandle = undefined;\r\n        this.hadSuccess = false;\r\n        this.reconnect = () => {\r\n            this.destroySocket();\r\n            this.hadSuccess = false;\r\n            this.socket = new PingingWebSocket(this.connectFunction, {\r\n                onOpen: () => {\r\n                    this.listener.onOpen();\r\n                },\r\n                onMessage: (envelope) => {\r\n                    this.hadSuccess = true;\r\n                    this.listener.onMessage(envelope);\r\n                },\r\n                onClose: (reason) => {\r\n                    this.destroySocket();\r\n                    // attempt to reconnect after a reconnectDelay\r\n                    const waitMs = this.hadSuccess ? 0 : reconnectDelayMs;\r\n                    this.reconnectHandle = setTimeout(this.reconnect, waitMs);\r\n                    this.listener.onClose(reason);\r\n                },\r\n            });\r\n            return this.socket.connect();\r\n        };\r\n        this.connectFunction = connectFunction;\r\n        this.listener = listener;\r\n    }\r\n    get state() {\r\n        if (this.socket) {\r\n            switch (this.socket.readyState) {\r\n                case BasicWebSocket.CONNECTING:\r\n                    return \"connecting\";\r\n                case BasicWebSocket.OPEN:\r\n                    return \"connected\";\r\n                default:\r\n                    return \"waiting to reconnect\";\r\n            }\r\n        }\r\n        if (this.reconnectHandle) {\r\n            return \"waiting to reconnect\";\r\n        }\r\n        else {\r\n            return \"closed\";\r\n        }\r\n    }\r\n    get ravenTags() {\r\n        return {\r\n            readyState: this.socket && this.socket.readyState,\r\n            state: this.state,\r\n        };\r\n    }\r\n    send(message) {\r\n        if (this.socket) {\r\n            this.socket.send(message);\r\n        }\r\n    }\r\n    close() {\r\n        this.destroySocket();\r\n    }\r\n    destroySocket() {\r\n        if (this.socket) {\r\n            this.socket.close();\r\n            this.socket = undefined;\r\n        }\r\n        if (this.reconnectHandle) {\r\n            clearTimeout(this.reconnectHandle);\r\n            this.reconnectHandle = undefined;\r\n        }\r\n    }\r\n}\r\n","dts":{"name":"/Users/shahryartariq/thunderenum/src/github.com/samsarahq/thunder/example/client/reconnectingwebsocket.d.ts","text":"import { ConnectFunction, OutEnvelope, SocketListener } from \"./pingingwebsocket\";\r\ndeclare type State = \"connecting\" | \"connected\" | \"waiting to reconnect\" | \"closed\";\r\nexport declare const reconnectDelayMs = 10000;\r\nexport declare class ReconnectingWebSocket {\r\n    private readonly connectFunction;\r\n    private readonly listener;\r\n    private socket?;\r\n    private reconnectHandle?;\r\n    private hadSuccess;\r\n    constructor(connectFunction: ConnectFunction, listener: SocketListener);\r\n    readonly state: State;\r\n    readonly ravenTags: {\r\n        readyState: number | undefined;\r\n        state: State;\r\n    };\r\n    reconnect: () => Promise<void>;\r\n    send(message: OutEnvelope): void;\r\n    close(): void;\r\n    private destroySocket;\r\n}\r\nexport {};\r\n"}}
