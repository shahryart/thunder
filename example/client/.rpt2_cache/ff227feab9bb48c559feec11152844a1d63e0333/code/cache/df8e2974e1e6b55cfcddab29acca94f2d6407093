{"code":"/**\r\n * Merge combines a graphql update from the websocket with an existing value\r\n * into an updated value.\r\n */\r\nexport function merge(original, update) {\r\n    if (Array.isArray(update)) {\r\n        if (typeof update[0] === \"object\") {\r\n            return Object.freeze(update[0]);\r\n        }\r\n        else {\r\n            return update[0];\r\n        }\r\n    }\r\n    if (typeof update !== \"object\" || update === null) {\r\n        return update;\r\n    }\r\n    let merged;\r\n    if (Array.isArray(original)) {\r\n        merged = [];\r\n        for (const x of update.$ || [[0, original.length]]) {\r\n            if (Array.isArray(x)) {\r\n                for (let i = x[0]; i < x[0] + x[1]; i++) {\r\n                    merged.push(original[i]);\r\n                }\r\n            }\r\n            else if (merged[x] === -1) {\r\n                merged.push(undefined);\r\n            }\r\n            else {\r\n                merged.push(original[x]);\r\n            }\r\n        }\r\n        delete update.$;\r\n        for (const key of Object.keys(update)) {\r\n            merged[Number(key)] = merge(merged[Number(key)], update[key]);\r\n        }\r\n    }\r\n    else {\r\n        merged =\r\n            typeof original === \"object\" && original !== null ? Object.assign({}, original) : {};\r\n        for (const key of Object.keys(update)) {\r\n            const value = update[key];\r\n            if (Array.isArray(value) && value.length === 0) {\r\n                delete merged[key];\r\n            }\r\n            else {\r\n                merged[key] = merge(merged[key], value);\r\n            }\r\n        }\r\n    }\r\n    return Object.freeze(merged);\r\n}\r\n","dts":{"name":"/Users/shahryartariq/thunderenum/src/github.com/samsarahq/thunder/example/client/merge.d.ts","text":"/**\r\n * Merge combines a graphql update from the websocket with an existing value\r\n * into an updated value.\r\n */\r\nexport declare function merge(original: any, update: any): any;\r\n"}}
